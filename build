#!/usr/bin/env node
/**
 * Build file for arlima
 * --------------------------
 *
 * This script does the following:
 *   1. Increases version number and changes DEV_MODE constant
 *   2. Runs all unit tests
 *   3. Translates pot-files
 *   4. Copies all wordpress files to a new directory named "build-X.Y.Z", one step down in the file system
 *   5. Minify js and css files in build dir
 *
 * Requirements: 
 *   - Node
 *   - Node module wrench ($ npm install wrench)
 *   - Node module uglify-JS ($ npm install uglify-js)
 *   - Node module uglify-CSS ($ npm install uglifycss)
 *   - Node module mval installed globally ($ npm install -g mval)
 *   - msgfmt and phpunit.phar has to be installed and added to your $PATH
 */

var fs = require('fs'),
    sys = require('sys'),
    wrench = require('./node_modules/wrench'),
    exec = require('child_process').exec,
    minifier = {
        css : require("uglifycss"),
        js : require("uglify-js")
    },
    mainScript = 'arlima.php',
    finishedTests = 0,
    testsFailed = false,
    newVersion = -1,
    tests = [
        'classes/tests/TestActions.php',
        'classes/tests/TestArlimaExport.php',
        'classes/tests/TestArlimaImport.php',
        'classes/tests/TestArlimaListFactory.php',
        'classes/tests/TestArlimaListRendering.php',
        'classes/tests/TestTemplateObjectCreator.php',
        'classes/tests/TestTemplatePathResolver.php'
    ],
    filesToMinify = {
        js: ['js/arlima/arlima.js', 'js/arlima/template-loader.js', 'js/jquery/jquery.ui.nestedSortable.js', 'js/jquery/jquery.hotkeys.js',
            'js/jquery/colourpicker/jquery.colourpicker.js', 'js/page-main.js', 'js/arlima/plupload-init.js'],
        css: ['css/admin.css']
    },
    buildFile = function(path, versionSplit) {
        var codeParts = fs.readFileSync(path, 'utf-8').split(versionSplit);
        var lastCodeParts = codeParts[1].split("\n");
        var origCode = codeParts[0] + versionSplit+newVersion+ "\n" + lastCodeParts.slice(1, lastCodeParts.length).join("\n") + "";
        fs.writeFileSync(path, origCode);
    },
    minifyJS = function(path) {
        var minCode = minifier.js.minify(path).code;
        var source = fs.readFileSync(path, 'utf-8');
        fs.writeFileSync(path, source.substr(0, source.indexOf('*/')+2) + minCode);
    },
    replaceInFile = function(path, from, to) {
        fs.writeFileSync(path, fs.readFileSync(path, 'utf-8').replace(from, to));
    },
    minifyCSS = function(path) {
        fs.writeFileSync(path, minifier.css.processString(fs.readFileSync(path, 'utf-8')) );
    };

/*
 * Find out new version number
 */
var versionParts = fs.readFileSync(mainScript, 'utf-8').split('Version: ')[1].split('\n')[0].trim().split('.');
if(versionParts.length < 3) {
    // new version number is decided in code
    newVersion = versionParts.join('.');
}
else {
    // Increase the last number by one
    var newSubVersion = parseInt(versionParts.splice(versionParts.length-1, 1)[0]) + 1;
    newVersion = versionParts.join('.') + '.' + newSubVersion.toString();
}

console.log('Build version: '+newVersion);
console.log('Running tests...');

exec('mval ./readme.txt', function(error, stdout, stderr) {

    if(error) {
        throw error;
    }
    if(stderr) {
        throw stderr;
    }

    tests.every(function(file) {
        exec('phpunit.phar  --no-globals-backup '+file, function (error, stdout, stderr) {

            if( testsFailed )
                return;

            if(stderr || error) {
                console.log('*** FAILED :: '+file);
                console.log(stdout);
                console.log(error);
                console.log(stderr);
                testsFailed = true;
                console.log('Build failed :(');
            }
            else {

                console.log('- SUCCESS :: '+file);
                finishedTests++;

                if( finishedTests == tests.length ) {
                    console.log('Translating pot-files');

                    exec('msgfmt -o lang/arlima-sv_SE.mo lang/arlima.pot', function (error, stdout, stderr) {
                        if( error || stderr) {
                            console.log('*** FAILED :: translation (msgfmt)');
                            console.log(stdout);
                            console.log(error);
                            console.log(stderr);
                        }
                        else {

                            console.log('Creating new plugin source');

                            buildFile('arlima.php', 'Version: ');
                            buildFile('readme.txt', 'Stable tag: ');

                            var buildDir = '../build-arlima-'+newVersion;

                            console.log(buildDir+ ' created');

                            wrench.copyDirSyncRecursive('../arlima/', buildDir);

                            // Remove files we don't wont to end up on wordpress repo

                            var remove = ['node_modules/', 'vendor/', 'composer.json', 'README.md',
                                'build', '.gitignore', 'composer.lock', 'category-arlima-example.php',
                                'test.php', '.git/'];

                            remove.every(function(file) {
                                try {
                                    if( file.substr(-1) == '/') {
                                        wrench.rmdirSyncRecursive(buildDir+'/'+file);
                                    }
                                    else {
                                        fs.unlinkSync(buildDir+'/'+file);
                                    }
                                } catch(e) {
                                    //console.log(e);
                                }
                                return true;
                            });

                            console.log('Minifying js and css');

                            replaceInFile(buildDir+'/constants.php', "define('ARLIMA_DEV_MODE', true)", "define('ARLIMA_DEV_MODE', false)");

                            filesToMinify.js.every(function(file) {
                                minifyJS(buildDir+'/'+file);
                                return true;
                            });
                            filesToMinify.css.every(function(file) {
                                minifyCSS(buildDir+'/'+file);
                                return true;
                            });

                            console.log('\033[32m# BUILD FINISHED :)\033[0m');
                        }
                    });
                }
            }
        });
        return true;
    });
});